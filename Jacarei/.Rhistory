hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
)
library(plotly)
p <- iris %>%
plot_ly(
type = 'scatter',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
)
p
p <- iris %>%
plot_ly(
type = 'barplot',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
)
p
library(plotly)
df <- data.frame(x = runif(200), y = runif(200), z = runif(200), j = runif(200), k = rep(0.7, 200), i = rnorm(200,0.6,0.05))
create_buttons <- function(df, y_axis_var_names) {
lapply(
y_axis_var_names,
FUN = function(var_name, df) {
button <- list(
method = 'restyle',
args = list('y', list(df[, var_name])),
label = sprintf('Show %s', var_name)
)
},
df
)
}
y_axis_var_names <- c('y', 'z', 'j', 'k', 'i')
p <- plot_ly(df, x = ~x, y = ~y, mode = "markers", name = "A", visible = T) %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.7,
buttons = create_buttons(df, y_axis_var_names)
)
))
p
install.packages("Rtools")
versions
version
install.packages("agricolae")
library("agricolae")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.1.tar.gz", repos = NULL, type="source")
install.packages("agricolae")
library("agricolae")
install.packages("rlang")
install.packages("Rlang")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mmnet")
source("http://bioconductor.org/biocLite.R")
biocLite("mmnet")
library(mmnet)
pid <- c("4440616.3","4440824.3")
names(pid) <- c("obese", "lean")
annot <- lapply(pid,
getMgrastAnnotation)
source("http://bioconductor.org/biocLite.R")
biocLite("mmnet")
BiocManager::install("mmnet")
version
# Install phyloseq from Bioconductor
source('http://bioconductor.org/biocLite.R')
biocLite("phyloseq")
# Install the rest of the packages from CRAN
install.packages(c("vegan", "metacoder", "taxa", "ggplot2", "dplyr", "readr", "stringr", "agricolae", "ape"),
repos = "http://cran.rstudio.com",
dependencies = TRUE)
library(metacoder)
x = parse_tax_data(hmp_otus, class_cols = "lineage", class_sep = ";",
class_key = c(tax_rank = "info", tax_name = "taxon_name"),
class_regex = "^(.+)__(.+)$")
heat_tree(x, node_label = taxon_names, node_size = n_obs, node_color = n_obs)
hmp_otus
library(metacoder)
x = parse_tax_data(hmp_otus, class_cols = "lineage", class_sep = ";",
class_key = c(tax_rank = "info", tax_name = "taxon_name"),
class_regex = "^(.+)__(.+)$")
heat_tree(x, node_label = taxon_names, node_size = n_obs, node_color = n_obs)
source("https://raw.githubusercontent.com/fbreitwieser/pavian/master/inst/shinyapp/install-pavian.R")
pavian::runApp(port=5000)
source("https://raw.githubusercontent.com/fbreitwieser/pavian/master/inst/shinyapp/install-pavian.R")
install.packages("remotes")
remotes::install_github("fbreitwieser/pavian")
pavian::runApp(port=5000)
pavian::runApp(port=5000)
source("https://raw.githubusercontent.com/fbreitwieser/pavian/master/inst/shinyapp/install-pavian.R")
install.packages("pavian
")
install.packages("pavian")
source("https://raw.githubusercontent.com/fbreitwieser/pavian/master/inst/shinyapp/install-pavian.R")
# Treinamento Jacareí
#Crédito (Antônio Carlos Porto - Anselmo A Santos)
#######################################################################################
########################## Pacotes ####################################################
#######################################################################################
#### Instalando pacotes
rm(list=ls())
#install.packages("tidyverse")
library("tidyverse")
#install.packages("readxl")
library("readxl")
#install.packages("openxlsx")
library("openxlsx")
#install.packages("fBasics")
library("fBasics")
#install.packages("ggplot2")
library("ggplot2")
#install.packages("car")
library("car")
#install.packages("ExpDes")
library("ExpDes")
#install.packages("agricolae")
library("agricolae")
#install.packages("asbio")
library("asbio")
#install.packages("latticeExtra")
library("latticeExtra")
#install.packages("readxl")
library("readxl")
#install.packages("openxlsx")
library("openxlsx")
rm(list=ls()) #Isso é um comando para limpar o R
#install.packages("tidyverse") # Isso é um comando para instalar um pacote
library("tidyverse") # Isso é um comando para abrir um pacote
#install.packages("readxl") #Instala pacotes necessários para a rodar o script
library("readxl") #Carrega pacotes necessários para a rodar o script
#install.packages("agricolae")
#library("agricolae")
#install.packages("corrgram")
library("corrgram")
install.packages("corrgram")
library("corrgram")
setwd("C:/Users/anselmos/Desktop/CursoR/Jacareí")
Experimento <- read_excel("ExperimentoLive4.xlsx")
Experimento
mean(Experimento$Crescimento)
sd(Experimento$Crescimento)
T1 <- filter(Experimento, Tratamento == "T1")
mean(T1$Crescimento)
sd(T1$Crescimento)
mExperimento <- Experimento %>% group_by(Tratamento) %>% summarise(Media = mean(Crescimento), Desvio = sd(Crescimento))
mExperimento
ggplot(mExperimento, aes(Tratamento, Media, fill = Tratamento)) +
geom_bar(stat = "identity", show.legend = TRUE) +
geom_errorbar(aes(ymin = Media - Desvio,
ymax = Media + Desvio), width = 0.2)
anova <-  aov(Crescimento ~ Tratamento, data=Experimento)
tukey <- HSD.test(anova, "Tratamento")
library("agricolae")
anova <-  aov(Crescimento ~ Tratamento, data=Experimento)
tukey <- HSD.test(anova, "Tratamento")
tukey$groups <- tukey$groups %>% rownames_to_column(var = "Tratamento") # Problemas com M
tukey$means <- tukey$means %>% rownames_to_column(var = "Tratamento")
final <- merge(tukey$means, tukey$groups, by = "Tratamento")
final
ggplot(final, aes(Tratamento, Crescimento.x, fill = Tratamento)) +
geom_bar(stat = "identity", show.legend = FALSE, width = 0.95, color = "#000000") +
geom_errorbar(aes(ymin = Crescimento.x - std,
ymax = Crescimento.x + std), width = 0.2) +
geom_text(aes(label = groups, y = (Crescimento.x + std)), vjust = -1, size = 3, color = "black") +
scale_fill_manual(values = cores) +
theme_classic() + labs(x = "Tratamentos", y = "Crescimento (cm)") +
scale_y_continuous(breaks=seq(0, 40, 5), limits = c(0, 40)) +
labs(title = "Meu teste de hipótese", subtitle = "Teste Tukey")
cores <- c("#004800", "#343deb" , "#970000", "#32a889", "#28323d", "#9f0fd4")
ggplot(final, aes(Tratamento, Crescimento.x, fill = Tratamento)) +
geom_bar(stat = "identity", show.legend = FALSE, width = 0.95, color = "#000000") +
geom_errorbar(aes(ymin = Crescimento.x - std,
ymax = Crescimento.x + std), width = 0.2) +
geom_text(aes(label = groups, y = (Crescimento.x + std)), vjust = -1, size = 3, color = "black") +
scale_fill_manual(values = cores) +
theme_classic() + labs(x = "Tratamentos", y = "Crescimento (cm)") +
scale_y_continuous(breaks=seq(0, 40, 5), limits = c(0, 40)) +
labs(title = "Meu teste de hipótese", subtitle = "Teste Tukey")
Expercorr <- select(Experimento, Crescimento, Dose)
Expercorr$Crescimento <- as.numeric(Expercorr$Crescimento)
Expercorr$Dose <- as.numeric(Expercorr$Dose)
Expercorr <- as.matrix(Expercorr)
corrgram(Expercorr)
corrgram(Expercorr,lower.panel = panel.shade,  upper.panel = panel.conf, text.panel = NULL, main="Correlação entre Dose e Crescimento")
Experimento
Experimento
Anova <- aov(Crescimento ~ Tratamento, data=Experimento)
Anova
residuo <- Anova$residuals
shapiro.test(residuo)
bartlett.test(Crescimento ~ Tratamento, data=Experimento)
dados <- iris
########################################################################################
############################## ANOVA ###################################################
########################################################################################
##### model
Petal <- aov(Petal.Length ~ Species, data=dados)
Anava <- anova(Petal)
#### evaluating the assumptions
names(Petal)
residuo <- Petal$residuals
shapiro.test(residuo)
hist(residuo)
plot(density(residuo))
k <- rnorm(1:250)
hist(k)
shapiro.test(k)
library(MASS)
# Set seed for reproducibility
set.seed(123)
# Generate data for 5 treatments
treatment1 <- rnorm(20, mean = 35, sd = 2)
treatment2 <- rnorm(20, mean = 30, sd = 2)
treatment3 <- rnorm(20, mean = 25, sd = 2)
treatment4 <- rnorm(20, mean = 20, sd = 2)
treatment5 <- rnorm(20, mean = 15, sd = 2)
# Combine into a data frame
data <- data.frame(
value = c(treatment1, treatment2, treatment3, treatment4, treatment5),
treatment = factor(rep(1:5, each = 20))
)
# Check if treatments are statistically different
anova_result <- aov(value ~ treatment, data = data)
summary(anova_result)
data
View(data)
write.xlsx(data, file = "ExperimentoNorm.xlsx")
#install.packages("readxl")
library("readxl")
#install.packages("openxlsx")
library("openxlsx")
write.xlsx(data, file = "ExperimentoNorm.xlsx")
rm(list=ls()) #Isso é um comando para limpar o R
#install.packages("tidyverse") # Isso é um comando para instalar um pacote
library("tidyverse") # Isso é um comando para abrir um pacote
#install.packages("readxl") #Instala pacotes necessários para a rodar o script
library("readxl") #Carrega pacotes necessários para a rodar o script
#install.packages("agricolae")
library("agricolae")
#install.packages("corrgram")
library("corrgram")
setwd("C:/Users/anselmos/Desktop/CursoR/Jacareí")
rm(list=ls()) #Isso é um comando para limpar o R
#install.packages("tidyverse") # Isso é um comando para instalar um pacote
library("tidyverse") # Isso é um comando para abrir um pacote
#install.packages("readxl") #Instala pacotes necessários para a rodar o script
library("readxl") #Carrega pacotes necessários para a rodar o script
#install.packages("agricolae")
library("agricolae")
#install.packages("corrgram")
library("corrgram")
setwd("C:/Users/anselmos/Desktop/CursoR/Jacareí")
Experimento <- read_excel("ExperimentoLive4.xlsx")
Anova <- aov(Crescimento ~ Tratamento, data=Experimento)
residuo <- Anova$residuals
hist(residuo)
plot(density(residuo))
shapiro.test(residuo)
bartlett.test(Crescimento ~ Tratamento, data=Experimento)
anova <-  aov(Crescimento ~ Tratamento, data=Experimento)
tukey <- HSD.test(anova, "Tratamento")
tukey$groups <- tukey$groups %>% rownames_to_column(var = "Tratamento") # Problemas com M
tukey$means <- tukey$means %>% rownames_to_column(var = "Tratamento")
final <- merge(tukey$means, tukey$groups, by = "Tratamento")
cores <- c("#004800", "#343deb" , "#970000", "#32a889", "#28323d", "#9f0fd4")
ggplot(final, aes(Tratamento, Crescimento.x, fill = Tratamento)) +
geom_bar(stat = "identity", show.legend = FALSE, width = 0.95, color = "#000000") +
geom_errorbar(aes(ymin = Crescimento.x - std,
ymax = Crescimento.x + std), width = 0.2) +
geom_text(aes(label = groups, y = (Crescimento.x + std)), vjust = -1, size = 3, color = "black") +
scale_fill_manual(values = cores) +
theme_classic() + labs(x = "Tratamentos", y = "Crescimento (cm)") +
scale_y_continuous(breaks=seq(0, 40, 5), limits = c(0, 40)) +
labs(title = "Meu teste de hipótese", subtitle = "Teste Tukey")
#############Correlograma########################################################
Expercorr <- select(Experimento, Crescimento, Dose)
Expercorr <- select(Experimento, Crescimento, Dose)
Experimento
Crescimento
Experimento
select(Experimento, Crescimento, Dose)
dados <- iris
########################################################################################
############################## ANOVA ###################################################
########################################################################################
##### model
Petal <- aov(Petal.Length ~ Species, data=dados)
Anava <- anova(Petal)
ames(Petal)
names(Petal)
residuo <- Petal$residuals
#### Normality of residuals
# Histogram
hist(residuo)
plot(density(residuo))
plot(density(dados$Petal.Length))  #  because don't can used observation data
library(fBasics)
histPlot(as.timeSeries(residuo))
shapiro.test(residuo)
bartlett.test(Petal.Length ~ Species, data=dados)
leveneTestCrescimento ~ Tratamento, data=Experimento)
leveneTest(Crescimento ~ Tratamento, data=Experimento)
library("car")
leveneTest(Crescimento ~ Tratamento, data=Experimento)
# Carregar a biblioteca necessária
library(MASS)
library(car) # Para o teste de Levene
# Definir a semente para reprodutibilidade
set.seed(123)
# Gerar dados para 5 tratamentos
treatment1 <- rnorm(20, mean = 35, sd = 2)
treatment2 <- rnorm(20, mean = 30, sd = 2)
treatment3 <- rnorm(20, mean = 25, sd = 2)
treatment4 <- rnorm(20, mean = 20, sd = 2)
treatment5 <- rnorm(20, mean = 15, sd = 2)
# Combinar em um data frame
data <- data.frame(
value = c(treatment1, treatment2, treatment3, treatment4, treatment5),
treatment = factor(rep(1:5, each = 20))
)
# Realizar ANOVA
anova_result <- aov(value ~ treatment, data = data)
summary(anova_result)
# Teste de Levene para homogeneidade das variâncias
leveneTest(value ~ treatment, data = data)
write.xlsx(data, file = "ExperimentoNorm.xlsx")
library(MASS)
library(car) # Para o teste de Levene
# Definir a semente para reprodutibilidade
set.seed(123)
# Gerar dados para 6 tratamentos
treatment1 <- rnorm(20, mean = 35, sd = 2)
treatment2 <- rnorm(20, mean = 30, sd = 2)
treatment3 <- rnorm(20, mean = 25, sd = 2)
treatment4 <- rnorm(20, mean = 20, sd = 2)
treatment5 <- rnorm(20, mean = 17, sd = 2)
treatment6 <- rnorm(20, mean = 14, sd = 2)
# Combinar em um data frame
data <- data.frame(
value = c(treatment1, treatment2, treatment3, treatment4, treatment5, treatment6),
treatment = factor(rep(1:6, each = 20))
)
# Realizar ANOVA
anova_result <- aov(value ~ treatment, data = data)
summary(anova_result)
# Teste de Levene para homogeneidade das variâncias
leveneTest(value ~ treatment, data = data)
# Teste de Shapiro-Wilk para normalidade dos resíduos
shapiro_test <- shapiro.test(residuals(anova_result))
# Imprimir os resultados do teste de Shapiro-Wilk
shapiro_test
write.xlsx(data, file = "ExperimentoNorm.xlsx")
rm(list=ls()) #Isso é um comando para limpar o R
#install.packages("tidyverse") # Isso é um comando para instalar um pacote
library("tidyverse") # Isso é um comando para abrir um pacote
#install.packages("readxl") #Instala pacotes necessários para a rodar o script
library("readxl") #Carrega pacotes necessários para a rodar o script
#install.packages("agricolae")
library("agricolae")
#install.packages("corrgram")
library("corrgram")
library("car")
setwd("C:/Users/anselmos/Desktop/CursoR/Jacareí")
Experimento <- read_excel("ExperimentoLive4.xlsx")
Anova <- aov(Crescimento ~ Tratamento, data=Experimento)
residuo <- Anova$residuals
hist(residuo)
residuo <- Anova$residuals
hist(residuo)
plot(density(residuo))
shapiro.test(residuo)
leveneTest(Crescimento ~ Tratamento, data=Experimento)
bartlett.test(Crescimento ~ Tratamento, data=Experimento)
leveneTest(Crescimento ~ Tratamento, data=Experimento)
anova <-  aov(Crescimento ~ Tratamento, data=Experimento)
tukey <- HSD.test(anova, "Tratamento")
tukey$groups <- tukey$groups %>% rownames_to_column(var = "Tratamento") # Problemas com M
tukey$means <- tukey$means %>% rownames_to_column(var = "Tratamento")
final <- merge(tukey$means, tukey$groups, by = "Tratamento")
cores <- c("#004800", "#343deb" , "#970000", "#32a889", "#28323d", "#9f0fd4")
ggplot(final, aes(Tratamento, Crescimento.x, fill = Tratamento)) +
geom_bar(stat = "identity", show.legend = FALSE, width = 0.95, color = "#000000") +
geom_errorbar(aes(ymin = Crescimento.x - std,
ymax = Crescimento.x + std), width = 0.2) +
geom_text(aes(label = groups, y = (Crescimento.x + std)), vjust = -1, size = 3, color = "black") +
scale_fill_manual(values = cores) +
theme_classic() + labs(x = "Tratamentos", y = "Crescimento (cm)") +
scale_y_continuous(breaks=seq(0, 40, 5), limits = c(0, 40)) +
labs(title = "Meu teste de hipótese", subtitle = "Teste Tukey")
Expercorr <- select(Experimento, Crescimento, Dose)
rm(list=ls()) #Isso é um comando para limpar o R
#install.packages("tidyverse") # Isso é um comando para instalar um pacote
library("tidyverse") # Isso é um comando para abrir um pacote
#install.packages("readxl") #Instala pacotes necessários para a rodar o script
library("readxl") #Carrega pacotes necessários para a rodar o script
#install.packages("agricolae")
library("agricolae")
#install.packages("corrgram")
library("corrgram")
library("car")
library("tidyverse")
select(Experimento, Crescimento, Dose)
Expercorr <- Experimento %>% select(Crescimento, Dose)
Experimento
Experimento
setwd("C:/Users/anselmos/Desktop/CursoR/Jacareí")
Experimento <- read_excel("ExperimentoLive4.xlsx")
Experimento
Expercorr <- select(Experimento, Crescimento, Dose)
Expercorr <- Experimento %>% select(Crescimento, Dose)
Experimento
Expercorr <- Experimento %>% select(Crescimento, Dose )
Expercorr <- Experimento %>% select(1, 3)
Expercorr <- dplyr:select(Experimento, Crescimento, Dose)
Expercorr <- dplyr::select(Experimento, Crescimento, Dose)
Expercorr <- dplyr::select(Experimento, Crescimento, Dose)
Expercorr$Crescimento <- as.numeric(Expercorr$Crescimento)
Expercorr$Dose <- as.numeric(Expercorr$Dose)
Expercorr <- as.matrix(Expercorr)
corrgram(Expercorr)
corrgram(Expercorr,lower.panel = panel.shade,  upper.panel = panel.conf, text.panel = NULL, main="Correlação entre Dose e Crescimento")
corrgram(Expercorr)
Expercorr
corrgram(Expercorr,lower.panel = panel.shade,  upper.panel = panel.conf, text.panel = NULL, main="Correlação entre Dose e Crescimento")
corrgram(Expercorr,lower.panel = panel.shade,  upper.panel = panel.conf, text.panel = NULL, main="Correlação entre Dose e Crescimento")
